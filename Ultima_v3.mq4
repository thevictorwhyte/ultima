//+------------------------------------------------------------------+
//| This MQL is generated by Expert Advisor Builder                  |
//|                http://sufx.core.t3-ism.net/ExpertAdvisorBuilder/ |
//|                                                                  |
//|  In no event will author be liable for any damages whatsoever.   |
//|                      Use at your own risk.                       |
//|                                                                  |
//|   Modified by Victor Whyte                                         |                                                                 
//|                                                                  |
//+------------------- DO NOT REMOVE THIS HEADER --------------------+

   /* 
      ULTIMA ENTRY RULES:
      GO LONG: when EMA(8) crosses SMA(200) from bottom and ADX is above 25
      GO SHORT: when EMA(8) crosses SMA(200) from top and ADX is above 25
      
      or
      
      GO LONG: when EMA(8), EMA(13) and EMA(21) are above SMA(200) 
               and EMA(8) crosses EMA(210 from bottom
               and ADX is above 25
               
      GO LONG: when EMA(8), EMA(13) and EMA(21) are below SMA(200) 
               and EMA(8) crosses EMA(210 from top
               and ADX is above 25
   
      ULTIMA EXIT RULES:
      Close buy trade when EMA(8) crosses EMA(21) from top
      Close sell trade when EMA(8) crosses EMA(21) from bottom
      Close half when price has moved 50 pips
   
      ULTIMA POSITION SIZING RULE:
      Sizing based on account size
   */

#define SIGNAL_NONE 0
#define SIGNAL_BUY   1
#define SIGNAL_SELL  2
#define SIGNAL_CLOSEBUY 3
#define SIGNAL_CLOSESELL 4

#property copyright "Expert Advisor Builder"
#property link      "http://sufx.core.t3-ism.net/ExpertAdvisorBuilder/"

extern int MagicNumber = 12345;
extern bool SignalMail = False;
extern double Lots = 1.0;
extern int Slippage = 3;
extern bool UseStopLoss = False;
extern int StopLoss = 20;
extern bool UseTakeProfit = False;
extern int TakeProfit = 0;
extern int FirstTakeProfit = 50;
extern bool UseTrailingStop = False;
extern int TrailingStop = 20;

// Set extern variables
extern int TimeFrame = 240;
extern int ADXPeriod = 14;
extern double MinimumADX = 25.0;
extern int BreakEven = 3;

// TDL 1: Declare Risk Variable and Trigger

extern bool isSizingOn = false;
extern double Risk = 3;

// To close half of trade when FirstTakeProfit is hit
bool isHalfClosed;
bool hasClosedHalf = false;
double newStopLoss;

int P = 1;
int Order = SIGNAL_NONE;
int Total, Ticket, Ticket2;
double StopLossLevel, TakeProfitLevel, StopLevel;
bool isYenPair = false;

// Set variables


double SMA200_1, SMA200_2;
double EMA8_1, EMA8_2;
double EMA13_1, EMA13_2;
double EMA21_1, EMA21_2;
double ADX14, prevADX;

bool isADXAscending(double currentADX) {
   prevADX = iADX(NULL, TimeFrame, ADXPeriod, PRICE_CLOSE, MODE_MAIN, 2);
   return currentADX >= prevADX;
}

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int init() {
   
   if(Digits == 5 || Digits == 3 || Digits == 1)P = 10;else P = 1; // To account for 5 digit brokers
   if(Digits == 3 || Digits == 2) isYenPair = true; // Adjust for YenPair

   return(0);
}
//+------------------------------------------------------------------+
//| Expert initialization function - END                             |
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
int deinit() {
   return(0);
}
//+------------------------------------------------------------------+
//| Expert deinitialization function - END                           |
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
//| Expert start function                                            |
//+------------------------------------------------------------------+
int start() {

   Total = OrdersTotal();
   Order = SIGNAL_NONE;

   //+------------------------------------------------------------------+
   //| Variable Setup                                                   |
   //+------------------------------------------------------------------+
   ADX14 = iADX(NULL, TimeFrame, ADXPeriod, PRICE_CLOSE, MODE_MAIN, 1);
   
   SMA200_1 = iMA(NULL, TimeFrame, 200, 0, MODE_SMA, PRICE_CLOSE, 1); 
   SMA200_2 = iMA(NULL, TimeFrame, 200, 0, MODE_SMA, PRICE_CLOSE, 2); 
   
   EMA8_1 = iMA(NULL, TimeFrame, 8, 0, MODE_EMA, PRICE_CLOSE, 1);
   EMA8_2 = iMA(NULL, TimeFrame, 8, 0, MODE_EMA, PRICE_CLOSE, 2);
   
   EMA13_1 = iMA(NULL, TimeFrame, 13, 0, MODE_EMA, PRICE_CLOSE, 1);
   EMA13_2 = iMA(NULL, TimeFrame, 13, 0, MODE_EMA, PRICE_CLOSE, 2);
   
   EMA21_1 = iMA(NULL, TimeFrame, 21, 0, MODE_EMA, PRICE_CLOSE, 1);
   EMA21_2 = iMA(NULL, TimeFrame, 21, 0, MODE_EMA, PRICE_CLOSE, 2);
   
   StopLevel = (MarketInfo(Symbol(), MODE_STOPLEVEL) + MarketInfo(Symbol(), MODE_SPREAD)) / P; // Defining minimum StopLevel

   if (StopLoss < StopLevel) StopLoss = StopLevel;
   if (TakeProfit < StopLevel) TakeProfit = StopLevel;
   
   // TDL 2: Add Sizing Algo
   if (isSizingOn == true) {
      Lots = Risk * 0.01 * AccountBalance() / (MarketInfo(Symbol(),MODE_LOTSIZE) * MarketInfo(Symbol(),MODE_TICKVALUE) * StopLoss * P * Point); // Sizing Algo based on account size
      if(isYenPair == true) Lots = Lots * 100; // Adjust for Yen Pairs
      Lots = NormalizeDouble(Lots, 2); // Round to 2 decimal place
   }
   //+------------------------------------------------------------------+
   //| Variable Setup - END                                             |
   //+------------------------------------------------------------------+

   //Check position
   bool IsTrade = False;

   for (int i = 0; i < Total; i ++) {
      Ticket2 = OrderSelect(i, SELECT_BY_POS, MODE_TRADES);
      if(OrderType() <= OP_SELL &&  OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber) {
         IsTrade = True;
         if(OrderType() == OP_BUY) {
            //Close

            //+------------------------------------------------------------------+
            //| Signal Begin(Exit Buy)                                           |
            //+------------------------------------------------------------------+

            /* ULTIMA EXIT RULES:
               Close buy trade when EMA(8) crosses EMA(21) from top
               Close sell trade when EMA(8) crosses EMA(21) from bottom
               Close half when price has moved 50 pips
            */
            
            if( EMA8_2 >= EMA21_2 && EMA8_1 < EMA21_1) Order = SIGNAL_CLOSEBUY; // Rule to EXIT a Long trade

            //+------------------------------------------------------------------+
            //| Signal End(Exit Buy)                                             |
            //+------------------------------------------------------------------+

            if (Order == SIGNAL_CLOSEBUY) {
               Ticket2 = OrderClose(OrderTicket(), OrderLots(), Bid, Slippage, MediumSeaGreen);
               if (SignalMail) SendMail("[Signal Alert]", "[" + Symbol() + "] " + DoubleToStr(Bid, Digits) + " Close Buy");
               IsTrade = False;
               continue;
            }
            
            //Close half of the order when price gets to 1:1 risk to reward
            if ((Bid >= (OrderOpenPrice() + (FirstTakeProfit * Point * P))) && !hasClosedHalf) {
               newStopLoss = OrderOpenPrice() + ((StopLevel + BreakEven) * Point * P);
               Ticket2 = OrderModify(OrderTicket(), OrderOpenPrice(), newStopLoss, OrderTakeProfit(), 0, clrNONE);
               Alert(StopLevel);
               isHalfClosed = OrderClose(OrderTicket(), OrderLots()/2, Bid, Slippage, clrNONE);
               if(isHalfClosed) { 
                  //Alert("Half of your order was closed"); 
                  
                  hasClosedHalf = true;
               }
               else Alert("Error occured while trying to close half of your order");
            }
            
            //Trailing stop
            if(UseTrailingStop && TrailingStop > 0) {                 
               if(Bid - OrderOpenPrice() > P * Point * TrailingStop) {
                  if(OrderStopLoss() < Bid - P * Point * TrailingStop) {
                     Ticket2 = OrderModify(OrderTicket(), OrderOpenPrice(), Bid - P * Point * TrailingStop, OrderTakeProfit(), 0, MediumSeaGreen);
                     continue;
                  }
               }
            }
         } else {
            //Close

            //+------------------------------------------------------------------+
            //| Signal Begin(Exit Sell)                                          |
            //+------------------------------------------------------------------+

            if ( EMA8_2 <= EMA21_2 && EMA8_1 > EMA21_1 ) Order = SIGNAL_CLOSESELL; // Rule to EXIT a Short trade

            //+------------------------------------------------------------------+
            //| Signal End(Exit Sell)                                            |
            //+------------------------------------------------------------------+
           

            if (Order == SIGNAL_CLOSESELL) {
               Ticket2 = OrderClose(OrderTicket(), OrderLots(), Ask, Slippage, DarkOrange);
               if (SignalMail) SendMail("[Signal Alert]", "[" + Symbol() + "] " + DoubleToStr(Ask, Digits) + " Close Sell");
               IsTrade = False;
               continue;
            }
            
            //Close half of the order when price gets to 1:1 risk to reward
            if ((Ask <= (OrderOpenPrice() - (FirstTakeProfit * Point * P))) && !hasClosedHalf) {
               newStopLoss = OrderOpenPrice() - ( (StopLevel + BreakEven) * Point * P);
               Ticket2 = OrderModify(OrderTicket(), OrderOpenPrice(), newStopLoss, OrderTakeProfit(), 0, clrNONE);
               //Alert(StopLevel);
               isHalfClosed = OrderClose(OrderTicket(), OrderLots()/2, Ask, Slippage, clrNONE);
               if(isHalfClosed) { 
                 //Alert("Half of your order was closed"); 
                  hasClosedHalf = true;
               }
               else Alert("Error occured while trying to close half of your order");
            }
            
            //Trailing stop
            if(UseTrailingStop && TrailingStop > 0) {                 
               if((OrderOpenPrice() - Ask) > (P * Point * TrailingStop)) {
                  if((OrderStopLoss() > (Ask + P * Point * TrailingStop)) || (OrderStopLoss() == 0)) {
                     Ticket2 = OrderModify(OrderTicket(), OrderOpenPrice(), Ask + P * Point * TrailingStop, OrderTakeProfit(), 0, DarkOrange);
                     continue;
                  }
               }
            }
         }
      }
   }

   //+------------------------------------------------------------------+
   //| Signal Begin(Entries)                                            |
   //+------------------------------------------------------------------+

   /* ULTIMA ENTRY RULES:
      GO LONG: when EMA(8) crosses SMA(200) from bottom and ADX is above 25
      GO SHORT: when EMA(8) crosses SMA(200) from top and ADX is above 25
      
      or
      
      GO LONG: when EMA(8), EMA(13) and EMA(21) are above SMA(200) 
               and EMA(8) crosses EMA(210 from bottom
               and ADX is above 25
               
      GO LONG: when EMA(8), EMA(13) and EMA(21) are below SMA(200) 
               and EMA(8) crosses EMA(210 from top
               and ADX is above 25
   */
      if ( (EMA8_2 < SMA200_2 && EMA8_1 > SMA200_1 && ADX14 > MinimumADX) || ( (EMA8_1 > SMA200_1 && EMA13_1 > SMA200_1 && EMA21_1 > SMA200_1) && (EMA8_2 < EMA21_2 && EMA8_1 > EMA21_1) && ADX14 > MinimumADX )) Order = SIGNAL_BUY; // Rule to ENTER a Long trade
   
      if ( (EMA8_2 > SMA200_2 && EMA8_1 < SMA200_1 && ADX14 > MinimumADX) || ( (EMA8_1 < SMA200_1 && EMA13_1 < SMA200_1 && EMA21_1 < SMA200_1) && (EMA8_2 > EMA21_2 && EMA8_1 < EMA21_1) && ADX14 > MinimumADX )) Order = SIGNAL_SELL; // Rule to ENTER a Short trade
   
      

   
   //+------------------------------------------------------------------+
   //| Signal End                                                       |
   //+------------------------------------------------------------------+

   //Buy
   if (Order == SIGNAL_BUY) {
      if(!IsTrade) {
         //Check free margin
         if (AccountFreeMargin() < (1000 * Lots)) {
            Print("We have no money. Free Margin = ", AccountFreeMargin());
            return(0);
         }
         
        

         if (UseStopLoss) StopLossLevel = Ask - StopLoss * Point * P; else StopLossLevel = 0.0;
         if (UseTakeProfit) TakeProfitLevel = Ask + TakeProfit * Point * P; else TakeProfitLevel = 0.0;

         Ticket = OrderSend(Symbol(), OP_BUY, Lots, Ask, Slippage, StopLossLevel, TakeProfitLevel, "Buy(#" + MagicNumber + ")", MagicNumber, 0, DodgerBlue);
         if(Ticket > 0) {
            if (OrderSelect(Ticket, SELECT_BY_TICKET, MODE_TRADES)) {
				Print("BUY order opened : ", OrderOpenPrice());
				hasClosedHalf = false;
                if (SignalMail) SendMail("[Signal Alert]", "[" + Symbol() + "] " + DoubleToStr(Ask, Digits) + " Open Buy");
			} else {
				Print("Error opening BUY order : ", GetLastError());
			}
         }
         return(0);
      }
   }

   //Sell
   if (Order == SIGNAL_SELL) {
      if(!IsTrade) {
         //Check free margin
         if (AccountFreeMargin() < (1000 * Lots)) {
            Print("We have no money. Free Margin = ", AccountFreeMargin());
            return(0);
         }

         if (UseStopLoss) StopLossLevel = Bid + StopLoss * Point * P; else StopLossLevel = 0.0;
         if (UseTakeProfit) TakeProfitLevel = Bid - TakeProfit * Point * P; else TakeProfitLevel = 0.0;

         Ticket = OrderSend(Symbol(), OP_SELL, Lots, Bid, Slippage, StopLossLevel, TakeProfitLevel, "Sell(#" + MagicNumber + ")", MagicNumber, 0, DeepPink);
         if(Ticket > 0) {
            if (OrderSelect(Ticket, SELECT_BY_TICKET, MODE_TRADES)) {
				Print("SELL order opened : ", OrderOpenPrice());
				hasClosedHalf = false;
                if (SignalMail) SendMail("[Signal Alert]", "[" + Symbol() + "] " + DoubleToStr(Bid, Digits) + " Open Sell");
			} else {
				Print("Error opening SELL order : ", GetLastError());
			}
         }
         return(0);
      }
   }

   return(0);
}
//+------------------------------------------------------------------+
